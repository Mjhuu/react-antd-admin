#!/usr/bin/env node
require('babel-register');
/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('sever:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => {
    console.log(`${port}端口，已启动`);
    console.log(`sever running……`);
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}

/* socket io */
const socketIO = require('socket.io');
// 2.针对 http server  生成 socket.IO  实例对象
const io = socketIO(server);

// 3. 建立连接
let onlineUsers = new Map();
// 当前在线列表
let onlineList = {};
// 返回消息类型
let socketType = {
    systemType: 0,
    onlineUsersType: 1,
    msgType: 2,
};

//对象数组去重
function unique(arr) {
    const obj = {};
    return arr.reduce((total, cur) => {
        if (!obj[cur.uuid]) {
            obj[cur.uuid] = total.push(cur)
        }
        return total
    }, [])
}
function setOnlineInfo(id, data, socket){
    if (!onlineUsers.has(id)) {
        onlineUsers.set(id, new Map())
    }
    if(!onlineList.hasOwnProperty(id)){
        onlineList[id] = []
    }
    data.uuid = data.uuid !== undefined ? data.uuid : socket.uuid;
    data.username = data.username !== undefined ? data.username : socket.username;
    data.headImg = data.headImg !== undefined ? data.headImg : socket.headImg;
    data.power = data.power !== undefined ? data.power : socket.power;
    onlineList[id].push({
        uuid: data.uuid,
        username: data.username,
        headImg: data.headImg,
        power: data.power
    });
    onlineList[id] = unique(onlineList[id]);
    onlineUsers.get(id).set(data.uuid, data);
    onlineUsers.get(id).get(data.uuid).socket = socket;
}

io.on('connection', (socket) => {
    console.log('已有用户成功链接socket!');
    socket.on('online', (data) => {
        data = JSON.parse(data);
        /*去重*/
        data.joinChatRooms = [...new Set(data.joinChatRooms)];
        data.joinChatRooms.forEach(id =>{
            setOnlineInfo(id, data, socket);
        });
        socket.uuid = data.uuid;
        socket.username = data.username;
        socket.headImg = data.headImg;
        socket.power = data.power;
        socket.joinChatRooms = data.joinChatRooms;

        // 通知加入的房间内的所有人有用户上线
        sayAll({
            type: socketType.onlineUsersType,
            result: {
                msg: '上线',
                onlineUsers: onlineList,
                kind: 1,//上线
                currentUser: socket.uuid
            }
        }, socket, 5, 1);
    });
    //监听用户退出
    socket.on('disconnect', () => {
        console.log('有人退出');
        // 删除退出用户-所有聊天室
        for(let room of onlineUsers){
            let newOnlineList = [];
            onlineUsers.get(room[0]).delete(socket.uuid);
            onlineList[room[0]].forEach(value => {
                if(value.uuid !== socket.uuid){
                    newOnlineList.push(value)
                }
            });
            onlineList[room[0]] = newOnlineList;
        }
        // 通知房间所有人有用户退出
        sayAll({
            type: socketType.onlineUsersType,
            result: {
                msg: '有人退出',
                onlineUsers: onlineList,
                kind: 0, //退出、下线
                currentUser: socket.uuid
            }
        }, socket, 5, 1);
    });
    // 3.1 返回消息
    socket.emit('msg', JSON.stringify({
        type: socketType.systemType,
        result: {
            msg: '欢迎您进入聊天室'
        }
    }));
    // 3.2 接收客户端的消息
    socket.on('msg', (data) => {
        data = JSON.parse(data);
        sayAll({
            result: {
                uuid: socket.uuid,
                username: socket.username,
                headImg: socket.headImg,
                power: socket.power,
                createTime: Date.now(),
                msg: data.msg,
                chatRoomId: data.chatRoomId
            },
            type: socketType.msgType
        }, socket, data.chatRoomId, 1);
    });
    // 3.3 接收到有新房间创建
    socket.on('addChatRoom', data =>{
        data = JSON.parse(data);
        let chatRoomId = data.chatRoomId;
        // 将新房间、用户 添加到onlineUsers 和 onlineList
        setOnlineInfo(chatRoomId, data, socket);
        socket.joinChatRooms = [...socket.joinChatRooms, chatRoomId];
        // 通知创建的房间内的所有人有新房间创建
        sayAll({
            type: socketType.onlineUsersType,
            result: {
                msg: '创建了新房间',
                onlineUsers: onlineList,
                kind: 3,//创建了新房间
                currentUser: socket.uuid
            }
        }, socket, chatRoomId, 1);
    });
    /**
     *  3.4 接收到有人主动搜索加入到房间
     * 将此用户添加到 onlineUsers 和 onlineList对应的房间号内， 并且通知此房间所有人有人加入
     */
    socket.on('joinChatRoom', data =>{
        data = JSON.parse(data);
        let chatRoomId = data.chatRoomId;
        // 将用户添加到此房间
        setOnlineInfo(chatRoomId, data, socket);
        // 通知创建的房间内的所有人有新房间创建
        sayAll({
            type: socketType.onlineUsersType,
            result: {
                msg: '有人加入了房间',
                onlineUsers: onlineList,
                kind: 3,//创建了新房间
                currentUser: socket.uuid
            }
        }, socket, chatRoomId, 1);
    });
});

function sayAll(data, socket, roomId, type = 0) { // 0代表除了自己所有人接收 1 代表自己也接收
    for (let room of onlineUsers) {
        if (room[0] === roomId) {
            for (let user of room[1]) {
                if (type === 1) {
                    user[1].socket.emit('msg', JSON.stringify(data));
                } else {
                    if (user[1].socket !== socket) {
                        user[1].socket.emit('msg', JSON.stringify(data));
                    }
                }
            }
        }
    }
}

